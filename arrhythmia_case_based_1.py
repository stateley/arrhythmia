# -*- coding: utf-8 -*-
"""arrhythmia_case based 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xXspt_mz2s_lk6XiB1h_nzacoQpdKafM

# Installasi
"""

#install.packages("keras")
library(keras)
#install.packages("tensorflow")
library(tensorflow)
library(ggplot2)

"""# Arrhythmia"""

path <- "arrhythmia.data"
df <- read.table(path)
df <- data.frame(do.call("rbind", strsplit(as.character(df$V1), ",", fixed = TRUE)))
df[df == "?"] <- NA
df <- subset(df, select=-X14)
for(i in 1:ncol(df)) {
  df[ , i] <- as.numeric(df[ , i])
  df[ , i][is.na(df[ , i])] <- mean(df[ , i], na.rm = TRUE)
}

summary(df)

"""# Visualizing"""

(p1<-ggplot(df,aes(`X1`))+
    geom_histogram(bins = 15,binwidth = 2, stat = 'count', color="white")+
    labs(x="Age",y="Jumlah",title = "Sebaran Umur")+
    annotate("text",x= 80,y=15,label = paste0("Mean: ",as.character(round(mean(df$X1),10)),"\nSTD :",as.character(round(sd(df$X1),2) ))))

s2 <- summary(df$X2)
(p2<-ggplot(df,aes(x=factor(`X2`)))+
    geom_histogram(stat = 'count')+
    labs(x="Sex",y="Jumlah",title = "Sebaran Sex (0 = male, 1 = female)")+
    annotate("text",x= 1,y=300,label = paste0("Mean: ",as.character(round(mean(df$X2),2)),"\nSTD :",as.character(round(sd(df$X2),2) ))))

library(scales)

s3 <- summary(df$X3)
(p3<-ggplot(df,aes(x=factor(`X3`)))+
    geom_histogram(stat = 'count')+
    labs(x="Height",y="Jumlah",title = "Sebaran Height [cm]")+
    annotate("text",x= 10,y=40,label = paste0("Mean: ",as.character(round(mean(df$X3),2)),"\n STD:",as.character(round(sd(df$X3),2) ))))

s4 <- summary(df$X4)
(p4<-ggplot(df,aes(x=factor(`X4`)))+
    geom_histogram(stat = 'count')+
    labs(x="Weight",y="Jumlah",title = "Sebaran Weight [kg]")+
    annotate("text",x= 10,y=30,label = paste0("Maka: ",as.character(round(mean(df$X4),2)),"\nSTD:",as.character(round(sd(df$X4),2) ))))

s5 <- summary(df$X5)
(p5<-ggplot(df,aes(x=factor(`X5`)))+
    geom_histogram(stat = 'count')+
    labs(x="QRS Duration [msec]",y="Jumlah",title = "Sebaran QRS [msec]")+
    annotate("text",x= 10,y=30,label = paste0("Mean: ",as.character(round(mean(df$X5),2)),"\nSTD:",as.character(round(sd(df$X5),2) ))))

s6 <- summary(df$X6)
(p6<-ggplot(df,aes(x=factor(`X6`)))+
    geom_histogram(stat = 'count')+
    labs(x="P-R Interval (Average Duration [msec])",y="Jumlah",title = "Sebaran P - R [msec]")+
    annotate("text",x= 15,y=20,label = paste0("Mean: ",as.character(round(mean(df$X6),2)),"\nSTD:",as.character(round(sd(df$X6),2) ))))

s7 <- summary(df$X7)
(p7<-ggplot(df,aes(x=factor(`X7`)))+
    geom_histogram(stat = 'count')+
    labs(x="Q-T Interval (Average Duration [msec])",y="Jumlah",title = "Sebaran QT [msec]")
    + annotate("text",x= 15,y=15,label = paste0("Mean: ",as.character(round(mean(df$X7),2)),"\nSTD :",as.character(round(sd(df$X7),2) ))))

s8 <- summary(df$X8)
(p8<-ggplot(df,aes(x=factor(`X8`)))+
    geom_histogram(stat = 'count')+
    labs(x="T Inteerval [msec]",y="Jumlah",title = "Sebaran Interval T [msec]")+
    annotate("text",x= 15,y=15,label = paste0("Mean: ",as.character(round(mean(df$X8),2)),"\nSTD :",as.character(round(sd(df$X8),2) ))))

s9 <- summary(df$X9)
(p9<-ggplot(df,aes(x=factor(`X9`)))+
    geom_histogram(stat = 'count')+
    labs(x="P Interval [msec]",y="Jumlah",title = "Sebaran Interval P[msec]")+
    annotate("text",x= 15,y=20,label = paste0("Mean: ",as.character(round(mean(df$X9),2)),"\nSTD:",as.character(round(sd(df$X9),2) ))))

s10 <- summary(df$X10)
(p10<-ggplot(df,aes(x=factor(`X10`)))+
    geom_histogram(stat = 'count')+
    labs(x="QRS",y="Jumlah",title = "Sebaran QRS")+
    annotate("text",x= 25,y=10,label = paste0("Mean: ",as.character(round(mean(df$X10),2)),"\nSTD:",as.character(round(sd(df$X10),2) ))))

s11 <- summary(df$X11)
(p11<-ggplot(df,aes(x=factor(`X11`)))+
    geom_histogram(stat = 'count')+
    labs(x="T",y="Jumlah",title = "Sebaran T")+
    annotate("text",x= 30,y=10,label = paste0("Mean: ",as.character(round(mean(df$X11),2)),"\nSTD:",as.character(round(sd(df$X11),2) ))))

s12 <- summary(df$X12)
(p12<-ggplot(df,aes(x=factor(`X12`)))+
    geom_histogram(stat = 'count')+
    labs(x="P",y="Jumlah",title = "Sebaran P")+
    annotate("text",x= 20,y=20,label = paste0("Mean: ",as.character(round(mean(df$X12),2)),"\nSTD",as.character(round(sd(df$X12),2) ))))

s13 <- summary(df$X13)
(p13<-ggplot(df,aes(x=factor(`X13`)))+
    geom_histogram(stat = 'count')+
    labs(x="QRST",y="Jumlah",title = "Sebaran QRST")+
    annotate("text",x= 30,y=10,label = paste0("Mean: ",as.character(round(mean(df$X13),2)),"\nSTD :",as.character(round(sd(df$X13),2) ))))

s15 <- summary(df$X15)
(p15<-ggplot(df,aes(x=factor(`X15`)))+
    geom_histogram(stat = 'count')+
    labs(x="Heart Rate",y="Jumlah",title = "Sebaran Heart Rate [menit]")+
    annotate("text",x= 30,y=30,label = paste0("Mean: ",as.character(round(mean(df$X15),2)),"\nSTD:",as.character(round(sd(df$X15),2) ))))

"""# MLP"""

df2 <- df
df2[,279] <- as.numeric(df2[,279]) -1

df2 <- as.matrix(df2)

dimnames(df2) <- NULL

ind <- sample(2, nrow(df2), replace=TRUE, prob=c(0.70, 0.30))

df2.training <- df2[ind==1, 1:278]
df2.test <- df2[ind==2, 1:278]

df2.trainingtarget <- df2[ind==1, 279]
df2.testtarget <- df2[ind==2, 279]

# One hot encode training target values
df2.trainLabels <- to_categorical(df2.trainingtarget)

# One hot encode test target values
df2.testLabels <- to_categorical(df2.testtarget)

print(df2.testLabels)

model <- keras_model_sequential()

model %>% 
  layer_dense(units = 66, activation = 'sigmoid', input_shape = c(278)) %>% 
  layer_dropout(0.001) %>%
  layer_dense(units = 16, activation = 'softmax')

summary(model)

model %>% compile(
  loss = 'categorical_crossentropy',
  optimizer = 'adam',
  metrics = 'accuracy'
)

history <- model %>% fit(
  df2.training, 
  df2.trainLabels, 
  epochs = 500,
  batch_size = 5, 
  validation_split = 0.2
)

plot(history)

plot(history$metrics$loss, main="Model Loss", xlab = "epoch", ylab="loss", col="blue", type="l")
lines(history$metrics$val_loss, col="green")
legend("topright", c("train","test"), col=c("blue", "green"), lty=c(1,1))

plot(history$metrics$acc, main="Model Accuracy", xlab = "epoch", ylab="accuracy", col="blue", type="l")
lines(history$metrics$val_acc, col="green")
legend("bottomright", c("train","test"), col=c("blue", "green"), lty=c(1,1))

classes <- model %>% predict(df2.test, batch_size = 128) 
head(classes, 5)

score <- model %>% evaluate(df2.test, df2.testLabels, batch_size = 128)
print(score)